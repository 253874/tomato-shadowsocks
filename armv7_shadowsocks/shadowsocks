#!/bin/sh
#
# Copyright (C) 2015-2016 Tomato shibby-shadowsocks  
# Copyright (C) 2015-2016 Jason Lin <wojiaolinmu008@gmail.com>
# --------------------------------------------------------------------------------------------------------
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
# --------------------------------------------------------------------------------------------------------
#

# Debug 
#set -x
# SMTP server (EP:"smtp.gmail.com")
SMTP="smtp.163.com"
# Send E-mail Username
username=""
# Send E-mail password
password=""
# Sender E-mail
FROM=""
# E-mail Subject
TITLE="ShadowSocks"
# Content of E-mail
CONTENT="Your tools running over the wall!"
# Target E-mail address
TO=""

# XIAOMI Fan Mode
xiaomi_fan=0

# ADM ad filter
adm_filter=0

READ="\033[31;1m"
BOLD="\033[42;1m"	
NORM="\033[0m"
ansi_red="\033[1;31m";
ansi_white="\033[1;37m";
ansi_green="\033[1;32m";
ansi_yellow="\033[1;33m";
ansi_blue="\033[1;34m";
ansi_bell="\007";
ansi_blink="\033[5m";
ansi_std="\033[m";
ansi_rev="\033[7m";
ansi_ul="\033[4m";
INFO="$BOLD INFO: $NORM"
WARNING="$READ WARNING: $NORM"
MOUNT="$ansi_white MOUNT: "
DEPENDENCE="$ansi_white DEPENDENCE: "
PLATFORM="$ansi_white PLATFORM: "
PACKAGES="$ansi_white PACKAGES: "
SHADOWSOCKS="$ansi_white SHADOWSOCKS: "
START_SCRIPT="$ansi_white START_SCRIPT: "
ShadowSocks_Account="$ansi_white ShadowSocks_Account: "
DNSMASQ="$ansi_white DNSMASQ: "
ZONEINFO_ASIA="$ansi_white ZONEINFO_ASIA: "
mult_switch="$ansi_white mult_switch: "
ss_switch="$ansi_white ss_switch: "
update_scr="$ansi_white update_scr: "
rebuild_scr="$ansi_white rebuild_scr: "

# You can mount the partition path editing (EP:"/jffs" or "/tmp/mnt/sda1" )
PREFIX=/jffs
SCRIPT_DIR=$(dirname ${0})
SCRIPT_DIR=$(cd ${SCRIPT_DIR} && pwd)

# Time
DATE=$(date "+%Y-%m-%d %H:%M:%S")

# Configure dnsmasq
dnsmasq=/opt/etc/dnsmasq.conf

# Schduler
CHECK=/opt/etc

# Zoneinfo
ZONE=/opt/share/zoneinfo/Hongkong

# Link
gfw_block_list="https://raw.githubusercontent.com/koolshare/koolshare.github.io/master/maintain_files/gfwlist.conf"
china_routing_list="http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest"
china_domain_list="https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf"
china_google_list="https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf"

case ${1} in

"set_up" ) 
	DECIVE=$(cat /proc/cpuinfo | grep "ARMv7" | grep -v "grep")
	if [ -z "$DECIVE" ]; then
		echo -e -n $PLATFORM
		sleep 1
		echo -e "$ansi_red ERROR. $ansi_std"
		echo -e $WARNING $BOLD This script is not suitable for the platform,can not continue.$NORM 
		exit 0
	else
		if [ ! -d "$PREFIX/shadowsocks" ]; then
			echo -e $INFO "Creating in..."
			cd $PREFIX;mkdir -p opt;mkdir -p shadowsocks;cd /;cd /tmp/home/root
			cp $SCRIPT_DIR/shadowsocks $PREFIX/shadowsocks
			mount -o bind $PREFIX/opt /opt
			cd /opt && wget -O - http://pkg.entware.net/binaries/armv7/installer/entware_install.sh | sh
			tar -czf /tmp/opt_backup_old.tar.gz -C $PREFIX opt			
			if [ -e $SCRIPT_DIR/china* -a -e $SCRIPT_DIR/cron* -a -e $SCRIPT_DIR/dif* -a -e $SCRIPT_DIR/pcap_dns* -a -e $SCRIPT_DIR/pdns* -a -e $SCRIPT_DIR/resol* -a -e $SCRIPT_DIR/shadowsocks-libe* -a -e $SCRIPT_DIR/dnscryp* -a -e $SCRIPT_DIR/zone* -a -e $SCRIPT_DIR/dnsma* ]; then
				cd $SCRIPT_DIR && opkg install --force-checksum china* pdnsd* pcap* reso* shadow* diff* dnscr* dnsma* cron* zonei*
				echo -e "$ansi_green SHADOWSOCKS script installed successfully! $ansi_std"
				sleep 5
				ln -s $PREFIX/shadowsocks/shadowsocks /opt/bin
				ln -sf /usr/sbin/xtables-multi /opt/sbin/iptables-save
				ln -sf /usr/sbin/xtables-multi /opt/sbin/ip6tables-save
				ln -sf /usr/sbin/xtables-multi /opt/bin/iptables-xml
				tar -czf /tmp/opt_backup_new.tar.gz -C $PREFIX opt
				mkdir -p $PREFIX/shadowsocks/opt_backup
				cp /tmp/opt_backup_new.tar.gz $PREFIX/shadowsocks/opt_backup/ && cp /tmp/opt_backup_old.tar.gz $PREFIX/shadowsocks/opt_backup/
			else
				echo -e "$ansi_red You do not import the entire IPK! $ansi_std"
				exit 0
			fi	
		else
			echo -e "$ansi_yellow SHADOWSOCKS already installed! $ansi_std"
		fi
		echo -e -n $PLATFORM
		sleep 1 
		echo -e "$ansi_green PASS. $ansi_std"
	fi

	autorun=/opt/etc/init.d/auto.run
	if [ ! -f "$autorun" ]; then
		echo "#!/bin/sh" >> $autorun
		echo >> $autorun
		echo "if [ ! -f /var/log/auto.run.lock ]; then" >> $autorun
		echo "	if [ -f /var/notice/wan ]; then" >> $autorun
		echo -e "		mount -o bind $PREFIX/opt /opt" >> $autorun
		echo "		shadowsocks run" >> $autorun
		echo "		shadowsocks ipset" >> $autorun
		echo "		if [ -f /var/notice/iptables ]; then" >> $autorun
		echo "			shadowsocks rules" >> $autorun
		echo "		fi" >> $autorun
		echo "		touch /var/log/auto.run.lock" >> $autorun
		echo "	fi" >> $autorun
		echo "fi" >> $autorun
		echo >> $autorun

		sleep 1
		chmod +x $autorun
		ln -s $autorun /opt/bin	
	fi

	if [ -d "$PREFIX/shadowsocks" ]; then
		echo -e -n $SHADOWSOCKS
		sleep 1
		echo -e "$ansi_green PASS. $ansi_std"
	else
		echo -e -n $SHADOWSOCKS
		sleep 1
		echo -e "$ansi_red ERROR. $ansi_std"
		rm -rf $PREFIX/opt
		echo -e $WARNING $BOLD"Please install the SHADOWSOCKS script."$NORM 
		exit 0		
	fi

	if [ "`ls -A /opt`" = "" ]; then
		echo -e -n $MOUNT
		sleep 1
		echo -e "$ansi_red ERROR. $ansi_std"
		rm -rf $PREFIX/opt
		echo -e $WARNING $BOLD"OPT directory does not mount."$NORM 
		exit 0
	else
		echo -e -n $MOUNT
		sleep 1
		echo -e "$ansi_green PASS. $ansi_std"		
	fi	

	BIN=/opt/bin
	SBIN=/opt/sbin
	echo -e "chinadns \ncrontab \ndiff \ndnscrypt-proxy \nPcap_DNSProxy \npdnsd-ctl \nresolvip \nss-redir \ndnsmasq \nzoneinfo_asia" > /var/log/find.txt	
	cd $BIN
	if [ ! -f chinadns -o ! -f Pcap_DNSProxy -o ! -f ss-redir -o ! -f resolvip -o ! -f pdnsd-ctl -o ! -f diff -o ! -f dnscrypt-proxy ]; then	
		ls -1 chinadns Pcap_DNSProxy ss-redir resolvip pdnsd-ctl diff dnscrypt-proxy crontab > /var/log/find_N.txt
	else
		ls -1 chinadns Pcap_DNSProxy ss-redir resolvip pdnsd-ctl diff dnscrypt-proxy crontab > /var/log/find_N.txt
	fi
	cd /
	
	find $SBIN/dnsmasq &> /dev/null;echo $? > /var/log/sbin.txt
	sbin=`sed -n '1p' /var/log/sbin.txt`
	if [ "$sbin" == "0" ]; then
		echo -e -n $DNSMASQ
		sleep 1 
		sed -i '/^$/d' /var/log/find_N.txt
		echo "dnsmasq" >> /var/log/find_N.txt
		echo -e "$ansi_green PASS. $ansi_std"
	else
		echo -e $DNSMASQ
		sleep 1	
		rm -rf $PREFIX/opt
		echo -e $ansi_white"dnsmasq-full"$ansi_std
	fi				 

	if [ -f "$ZONE" ]; then
		echo -e -n $ZONEINFO_ASIA
		sleep 1
		sed -i '/^$/d' /var/log/find_N.txt
		echo "zoneinfo_asia" >> /var/log/find_N.txt
		echo -e "$ansi_green PASS. $ansi_std"
	else
		echo -e -n $ZONEINFO_ASIA
		sleep 1		
		rm -rf $PREFIX/opt
		echo -e "$ansi_white zoneinfo_asia"
	fi
	
	find $BIN/chinadns $BIN/Pcap_DNSProxy $BIN/ss-redir $BIN/resolvip $BIN/pdnsd-ctl $BIN/diff $BIN/dnscrypt-proxy $BIN/crontab $SBIN/dnsmasq $ZONE &> /dev/null;echo $? > /var/log/diff.txt
	DIFF=`sed -n '1p' /var/log/diff.txt`
	diff -w /var/log/find.txt /var/log/find_N.txt | grep \^\< > /var/log/diff_show.txt
	if [ "$DIFF" == "0" ]; then
		echo -e -n $DEPENDENCE
		sleep 1 
		echo -e "$ansi_green PASS. $ansi_std"
	else
		if [ ! -e $BIN/chinadns -a ! -e $BIN/crontab -a ! -e $BIN/diff -a ! -e $BIN/Pcap_DNSProxy -a ! -e $BIN/pdnsd-ctl -a ! -e $BIN/resolvip -a ! -e $BIN/ss-redir -a ! -e $BIN/dnscrypt-proxy -a ! -e $SBIN/dnsmasq -a ! -e $ZONE ]; then
			echo -e $DEPENDENCE
			sleep 1
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING \n$BOLD Please install the following software:"$NORM
			rm -rf $PREFIX/opt
			echo -e $ansi_white"shadowsocks-libev \nchinadns \npdnsd \npcap-dnsproxy \nresolvip \ndiffutils \ncrontab \ndnscrypt-proxy \ndnsmasq \nzoneinfo_asia"$ansi_std
			exit 0
		else	
			echo -e $DEPENDENCE
			sleep 1
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING \n$BOLD Please install the following software:"$NORM
			rm -rf $PREFIX/opt
			cat /var/log/diff_show.txt
			exit 0
		fi
	fi
	
	if [ -f "$autorun" ]; then
		echo -e -n $START_SCRIPT
		sleep 1
		echo -e "$ansi_green PASS. $ansi_std"
	fi
	
	ask_yes_or_no() {
    		read -p "$1 ([y]es or [n]o): "
    		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        		y|yes) echo "yes" ;;
        		*)     echo "no" ;;
    		esac
	}

	echo "============================================"
	echo "Please input your shadowsocks account information:"
	read -p "(Your Server IP):" IP
	read -p "(Your Server Port):" port
	read -p "(Your Local Port):" PORT
	read -p "(Your Password):" password
	read -p "(Your Encryption Method):" method
	echo "============================================"
	echo "Please confirm your shadowsocks information:"
	echo -e "Your Server IP: \033[41;37m ${IP} \033[0m"
	echo -e "Your Server Port: \033[41;37m ${port} \033[0m"
	echo -e "Your Server Port: \033[41;37m ${PORT} \033[0m"
	echo -e "Your Password: \033[41;37m ${password} \033[0m"
	echo -e "Your Encryption Method: \033[41;37m ${method} \033[0m"
	echo "============================================"

	resolvip -t 10 ${IP} > /opt/var/log/resolvip_tmp.txt
	if [ `cat /opt/var/log/resolvip_tmp.txt | cut -d"." -f1` == `resolvip -t 10 192. | cut -d"." -f1` ]; then
		echo -e "$WARNING You input an incorrect IP, please re-enter your: $ansi_white \nshadowsocks set_up"$NORM
		exit 0					
	fi		
	server_ip=/opt/var/log/resolvip_tmp.txt

	get_server_ip() {
		cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
			$(cat ${server_ip=:/dev/null} 2>/dev/null)	
	EOF
	}
	echo $(get_server_ip) > /opt/var/log/resolvip.txt
	sed -i '/^$/d' /opt/var/log/resolvip.txt
	if [ -s "/opt/var/log/resolvip.txt" ]; then
		RIP=`sed -n '1p' /opt/var/log/resolvip.txt`
		echo -e $INFO Creating shadowsocks config file...
		rm -f $CHECK/shadowsocks.json
		cat > $CHECK/shadowsocks.json <<-end
	{
    "server":"$RIP",
    "server_port":${port},
    "local_address":"0.0.0.0",
    "local_port":${PORT},
    "password":"${password}",
    "timeout":60,
    "method":"${method}"
	}
		end
		sed -i '11d' $CHECK/shadowsocks.json
		echo ${PORT} > /opt/var/log/local_port.txt
	else
		echo -e "$WARNING Can not write the configuration information, please re-enter your: $ansi_white \nshadowsocks set_up"$NORM
		exit 0
	fi		
	
	echo -e $INFO Please confirm your shadowsocks and dnsmasq information with "\033[4m yes \033[0m"  or "\033[4m no \033[0m"  to exit
	if [ "no" == $(ask_yes_or_no "Is your config above correct?") ]; then
		echo -e $INFO Re-setting...
  		echo -e $INFO Exiting...
		rm -f $CHECK/shadowsocks.json
  		exit 0 
	fi	
	
#	echo -e $INFO enable udprelay mode? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
#	if [ "yes" == $(ask_yes_or_no "enable udprelay?") ]; then
#		echo -e $INFO enable udprelay...
#		sed -i s'/ARGS="-c \/opt\/etc\/shadowsocks.json"/ARGS="-u -c \/opt\/etc\/shadowsocks.json"/g' $CHECK/init.d/S22shadowsocks
#		sed -r 's/#(['$'\t'' ]*ip rule add fwmark 0x01\/0x01 table 100)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sed -r 's/#(['$'\t'' ]*ip route add local 0.0.0.0\/0 dev lo table 100)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sed -r 's/#(['$'\t'' ]*iptables -t mangle -N SS_SPEC_TPROXY)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sleep 1
#		sed -i 's/\(^[ \t]\+iptables -t mangle -A SS_SPEC_TPROXY -d $SS -j RETURN\)/#\1/' $PREFIX/shadowsocks/shadowsocks
#		sed -i 's/\(^[ \t]\+iptables -t mangle -A SS_SPEC_TPROXY -p udp -m set ! --match-set ss_spec_wan_ac dst -j TPROXY --on-port $PORT --tproxy-mark 0x01/0x01\)/#\1/' $PREFIX/shadowsocks/shadowsocks
#		sed -i 's/\(^[ \t]\+iptables -t mangle -A PREROUTING -p udp -m multiport --dports 22,80,443 -m set ! --match-set ss_spec_lan_ac src -j SS_SPEC_TPROXY\)/#\1/' $PREFIX/shadowsocks/shadowsocks		
#	fi
#		

echo -e $INFO "Please select Please choose the following programs:\n\
$BOLD##programs_1##:$NORM (ss-redir+gfwlist+pdnsd)\n\
$BOLD##programs_2##:$NORM (ss-redir+chnroutes+chinadns+pdnsd)\n\
$BOLD##programs_3##:$NORM (ss-redir+chnroutes+chinadns+dnscrypt-proxy)\n\
$BOLD##programs_4##:$NORM (ss-redir+chnroutes+pcap_dnsproxy)\n\
$BOLD##programs_5##:$NORM (ss-tunnel+chnroutes+chinadns)\n\
Your Choice:"
	read programs
	if [ $programs == "1" ];then
		echo -e "$BOLD Set programs_1..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json  > $PREFIX/opt/var/log/server.txt

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S26pdnsd (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sleep 1
#		sed -r 's/#(['$'\t'' ]*PLAN=Pcap_DNSProxy)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks

		echo -e $INFO Configuring dnsmasq_custom...
		echo > $dnsmasq
		echo "min-cache-ttl=600" >> $dnsmasq
		echo "cache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$PREFIX/shadowsocks/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq

		service dnsmasq restart		

		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks run
		touch /var/log/ipset.lock
		$PREFIX/shadowsocks/shadowsocks ipset
		sleep 1
		$PREFIX/shadowsocks/shadowsocks rules
		$PREFIX/shadowsocks/shadowsocks update_gfwlist

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		rm -f $CHECK/pdnsd.conf
		cat > $CHECK/pdnsd.conf <<-end
global {
perm_cache=2048;
cache_dir="/var/pdnsd";
run_as="nobody";
server_port = 1054;
server_ip = 127.0.0.1;  
status_ctl = on;					               
query_method=tcp_only;
min_ttl=6h;       
max_ttl=1w;        
timeout=10;        
}

server {
label= "google";
ip = 208.67.222.222; 
port = 443;   	
root_server = on;    
uptest= none;         
}
		end
		
		$PREFIX/shadowsocks/shadowsocks run
		
		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
		
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log \necho \"\" > /var/log/pdnsd_watchdog.log \necho \"\" > /var/log/iptables_rules.log" > $CHECK/cron.5mins/clear_log.sh
		echo 'iptables-save | grep -E "gfw_black|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log' > $CHECK/cron.5mins/iptables_restore.sh
		echo -e "shadowsocks check \nshadowsocks check_rules" > $CHECK/cron.1min/check.sh				

		shadowsocks temp
	
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"	
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "2" ];then
		echo -e "$BOLD Set programs_2..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed '4c PROCS=chinadns' $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S24cn
		sed '5c ARGS="-p 5353 -c /opt/etc/chnroute.txt -s 114.114.114.114,127.0.0.1:1054"' $CHECK/init.d/S24cn > $CHECK/init.d/S24chinadns

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S26pdnsd (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sleep 1	
#		sed -r 's/#(['$'\t'' ]*PLAN=chinadns)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks		
		
		CHINADNS=`nvram get wan_get_dns | sed 's/ /,/'`
		sed -i "s/^ARGS=\(.*\)114.114.114.114\(.*\)$/ARGS=\1$CHINADNS\2/" $CHECK/init.d/S24chinadns
	
		rm -f $CHECK/init.d/S24cn
		chmod +x $CHECK/init.d/S2*

		sleep 1
		echo -e $INFO Creating pdnsd.conf file...
		rm -f $CHECK/pdnsd.conf
		cat > $CHECK/pdnsd.conf <<-end
global {
perm_cache=2048;
cache_dir="/var/pdnsd";
run_as="nobody";
server_port = 1054;
server_ip = 127.0.0.1;  
status_ctl = on;					               
query_method=tcp_only;
min_ttl=6h;       
max_ttl=1w;        
timeout=10;        
}

server {
label= "google";
ip = 208.67.222.222,208.67.220.220;     	
root_server = on;    
uptest= none;         
}
		end

		echo -e $INFO Configuring dnsmasq_custom...	
		sleep 1
		echo > $dnsmasq			
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nmin-cache-ttl=600 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$PREFIX/shadowsocks/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq			
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		

		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks run
		sleep 4
		$PREFIX/shadowsocks/shadowsocks ipset
		sleep 2
		$PREFIX/shadowsocks/shadowsocks rules

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit

		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log \necho \"\" > /var/log/pdnsd_watchdog.log \necho \"\" > /var/log/chinadns_watchdog.log \necho \"\" > /var/log/iptables_rules.log" > $CHECK/cron.5mins/clear_log.sh
		echo 'iptables-save | grep -E "SS_SPEC|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log' > $CHECK/cron.5mins/iptables_restore.sh
		echo -e "shadowsocks check \nshadowsocks check_rules" > $CHECK/cron.1min/check.sh		

		shadowsocks temp		
		
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "3" ];then
		echo -e "$BOLD Set programs_3..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed '4c PROCS=chinadns' $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S24cn
		sed '5c ARGS="-p 5353 -c /opt/etc/chnroute.txt -s 114.114.114.114,127.0.0.1:1054,208.67.222.222:443"' $CHECK/init.d/S24cn > $CHECK/init.d/S24chinadns

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S29dnscrypt-proxy (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sed -i 's/^#\([ \t]\+iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5353\)/\1/' $PREFIX/shadowsocks/shadowsocks		

		CHINADNS=`nvram get wan_get_dns | sed 's/ /,/'`
		sed -i "s/^ARGS=\(.*\)114.114.114.114\(.*\)$/ARGS=\1$CHINADNS\2/" $CHECK/init.d/S24chinadns

		rm -f $CHECK/init.d/S24cn
		chmod +x $CHECK/init.d/S2*

		echo -e $INFO Configuring dnsmasq_custom...
		sleep 1
		echo > $dnsmasq		
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nproxy-dnssec \nmin-cache-ttl=6000 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$PREFIX/shadowsocks/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		

		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks run
		sleep 4
		$PREFIX/shadowsocks/shadowsocks ipset
		sleep 2
		$PREFIX/shadowsocks/shadowsocks rules

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
	
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log \necho \"\" > /var/log/dnscrypt-proxy_watchdog.log \necho \"\" > /var/log/chinadns_watchdog.log \necho \"\" > /var/log/iptables_rules.log" > $CHECK/cron.5mins/clear_log.sh
		echo 'iptables-save | grep -E "SS_SPEC|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log' > $CHECK/cron.5mins/iptables_restore.sh	
		echo -e "shadowsocks check \nshadowsocks check_rules" > $CHECK/cron.1min/check.sh	

		shadowsocks temp		
		
		/opt/etc/init.d/S29dnscrypt-proxy start
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "4" ];then
		echo -e "$BOLD Set programs_4..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S27pcap_dnsproxy (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -i 's/^#\([ \t]\+iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5353\)/\1/' $PREFIX/shadowsocks/shadowsocks
#		sed -i 's/^#\([ \t]\+iptables -t nat -A PREROUTING -p tcp --dport 53 -j DNAT --to-destination $lan_ipaddr:53\)/\1/' $PREFIX/shadowsocks/shadowsocks
#		sleep 1
#		sed -r 's/#(['$'\t'' ]*PLAN=Pcap_DNSProxy)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sed 's/#\(iptables -t nat -I PREROUTING $PRE\)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sleep 1
#		sed 's/#\(iptables -t nat -A PREROUTING $PRE2\)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks

		echo -e $INFO Configuring dnsmasq_custom...
		sleep 1
		echo > $dnsmasq		
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nall-servers \nmin-cache-ttl=6000 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$PREFIX/shadowsocks/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		

		local_dns=`cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' | sed -n '1p'`
		sed -i "s/ 114.114.115.115:53/ $local_dns:53/" $CHECK/pcap-dnsproxy/Config.conf
		
		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		touch /var/log/pcap_dnsproxy.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks run
		sleep 4
		$PREFIX/shadowsocks/shadowsocks ipset
		sleep 2
		$PREFIX/shadowsocks/shadowsocks rules

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
	
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log \necho \"\" > /var/log/Pcap_DNSProxy_watchdog.log \necho \"\" > /var/log/iptables_rules.log" > $CHECK/cron.5mins/clear_log.sh
		echo 'iptables-save | grep -E "SS_SPEC|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log' > $CHECK/cron.5mins/iptables_restore.sh		
		echo -e "shadowsocks check \nshadowsocks check_rules" > $CHECK/cron.1min/check.sh			

		shadowsocks temp
		
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "5" ];then
		echo -e "$BOLD Set programs_5..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed -e "s/shadowsocks.json\"/shadowsocks.json -b 0.0.0.0 -l 5300 -L 8.8.8.8:53 -u\"/" -e "s/PROCS=ss-redir/PROCS=ss-tunnel/" $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S23ss-tunnel
		sed '4c PROCS=chinadns' $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S24cn
		sed '5c ARGS="-p 5353 -l /opt/etc/chinadns_iplist.txt -c /opt/etc/chnroute.txt -s 114.114.114.114,127.0.0.1:5300"' $CHECK/init.d/S24cn > $CHECK/init.d/S24chinadns
		
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S23ss-tunnel (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
#		sleep 1
#		sed -r 's/#(['$'\t'' ]*PLAN=chinadns)/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks 	

		CHINADNS=`nvram get wan_get_dns | sed 's/ /,/'`
		sed -i "s/^ARGS=\(.*\)114.114.114.114\(.*\)$/ARGS=\1$CHINADNS\2/" $CHECK/init.d/S24chinadns
	
		rm -f $CHECK/init.d/S24cn
		chmod +x $CHECK/init.d/S2*

		echo -e $INFO Configuring dnsmasq_custom...
		sleep 1
		echo > $dnsmasq		
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nmin-cache-ttl=6000 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$PREFIX/shadowsocks/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		
			
		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks run
		sleep 4
		$PREFIX/shadowsocks/shadowsocks ipset
		sleep 2
		$PREFIX/shadowsocks/shadowsocks rules

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
	
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log \necho \"\" > /var/log/chinadns.log \necho \"\" > /var/log/iptables_rules.log" > $CHECK/cron.5mins/clear_log.sh
		echo 'iptables-save | grep -E "SS_SPEC|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log' > $CHECK/cron.5mins/iptables_restore.sh		
		echo -e "shadowsocks check \nshadowsocks check_rules" > $CHECK/cron.1min/check.sh			

		shadowsocks temp
		
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	fi	
	;;

"run" )
	touch $PREFIX/shadowsocks/flush.lock

	sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json  > /var/log/server.txt
	
	if [ -f "$PREFIX/shadowsocks/chnroutes.lock" ]; then
		$PREFIX/shadowsocks/shadowsocks update
	else
		echo '['$DATE'] Has loaded China route table.' > /var/log/chnroutes.log
	fi

	if [ "$adm_filter" == "1" ]; then
		if [ ! -f "/opt/var/log/admflt.lock" ]; then
			sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S30adm (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		fi	
	fi	
	
	PROCESS=$(ps | grep "ss-redir" | grep -v "grep")
	if [ -z "$PROCESS" ]; then
		mount -o bind /opt/sbin/dnsmasq /usr/sbin/dnsmasq && service dnsmasq restart
#		/opt/etc/init.d/S30adm start && touch /var/log/admflt.lock
		/opt/etc/init.d/S22shadowsocks start && touch /var/log/shadowsocks.lock
#		/opt/etc/init.d/S23ss-tunnel start && touch /var/log/ss-tunnel.lock
#		/opt/etc/init.d/S26pdnsd start && touch /var/log/pdnsd.lock
#		/opt/etc/init.d/S24chinadns start && touch /var/log/chinadns.lock
#		/opt/etc/init.d/S27pcap_dnsproxy start && touch /var/log/pcap_dnsproxy.lock
#		/opt/etc/init.d/S29dnscrypt-proxy start && touch /var/log/dnscrypt-proxy.lock
		/opt/etc/init.d/S00timezone start
		/opt/etc/init.d/S10cron start
		exit 0	
	else
		for i in `cat /var/log/server.txt`;do
        		for j in `cat $PREFIX/opt/var/log/server.txt`;do
                		if [ $i == $j ]; then
					echo "$(date): OK" >> /var/log/account_switching.log
				else
					/opt/etc/init.d/S22shadowsocks restart
#					/opt/etc/init.d/S23ss-tunnel restart
					rm -f $PREFIX/shadowsocks/flush.lock
					$PREFIX/shadowsocks/shadowsocks flush
					sleep 2
					$PREFIX/shadowsocks/shadowsocks rules
				fi
			done
		done
	fi
	;;

"ipset" )
	echo -e -n "$ansi_white Loading ipset module... "
	for module in ip_set ip_set_bitmap_ip ip_set_bitmap_ipmac ip_set_bitmap_port ip_set_hash_ip ip_set_hash_ipport ip_set_hash_ipportip ip_set_hash_ipportnet ip_set_hash_net ip_set_hash_netport ip_set_list_set xt_set
	do
		modprobe $module
	done
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	;;

"rules" )
	_input=$PREFIX/shadowsocks/ignore.list
	
	sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json  > $PREFIX/opt/var/log/server.txt	
	SS=`sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json`

	PORT=`sed -n '1p' /opt/var/log/local_port.txt`	
	
	if [ -f "$PREFIX/shadowsocks/ignore.list" ]; then
		ipset -N ss_spec_lan_ac hash:net
		sed -e "s/^/-A ss_spec_wan_ac &/g" -e "1 i\-N ss_spec_wan_ac hash:net " $_input | ipset -R -!	
	
		iptables -t nat -N SS_SPEC_WAN_AC
		iptables -t nat -N SS_SPEC_WAN_FW
		iptables -t nat -A SS_SPEC_WAN_AC -d $SS -j RETURN
		nvram get wan_ppp_get_ip > /var/log/wan_ipaddr.log
		iptables -t nat -A SS_SPEC_WAN_AC -d `nvram get wan_ppp_get_ip` -j RETURN		
#		iptables -t nat -A SS_SPEC_WAN_AC -d `sed -n '1p' /opt/var/log/resolvip.txt` -j RETURN	
		iptables -t nat -A SS_SPEC_WAN_AC -m set --match-set ss_spec_wan_ac dst -j RETURN
		iptables -t nat -A SS_SPEC_WAN_AC -j SS_SPEC_WAN_FW
		iptables -t nat -A SS_SPEC_WAN_FW -p tcp -j REDIRECT --to-ports $PORT
		IFNAME=$(nvram get lan_ifname &> /dev/null)
		if [ -f "/opt/var/log/allowed_within.lock" ]; then
			iptables -t nat -I PREROUTING 1 ${IFNAME:+-i $IFNAME} -p tcp -m multiport --dports 22,80,443 -m set --match-set ss_spec_lan_ac src -j SS_SPEC_WAN_AC
		else	
			iptables -t nat -I PREROUTING 1 ${IFNAME:+-i $IFNAME} -p tcp -m multiport --dports 22,80,443 -m set ! --match-set ss_spec_lan_ac src -j SS_SPEC_WAN_AC
		fi
		lan_ipaddr=`nvram get lan_ipaddr`
#		iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5353
#		iptables -t nat -A PREROUTING -p tcp --dport 53 -j DNAT --to-destination $lan_ipaddr:53
		IFNAME=$(nvram get lan_ifname &> /dev/null)
		iptables -t nat -I OUTPUT 1 ${IFNAME:+-o $IFNAME} -p tcp -m multiport --dports 22,80,443 -j SS_SPEC_WAN_AC
#
#		ip rule add fwmark 0x01/0x01 table 100
#		ip route add local 0.0.0.0/0 dev lo table 100
#		iptables -t mangle -N SS_SPEC_TPROXY
#		iptables -t mangle -A SS_SPEC_TPROXY -d $SS -j RETURN
#		iptables -t mangle -A SS_SPEC_TPROXY -p udp -m set ! --match-set ss_spec_wan_ac dst -j TPROXY --on-port $PORT --tproxy-mark 0x01/0x01 
#		iptables -t mangle -A PREROUTING -p udp -m multiport --dports 22,80,443 -m set ! --match-set ss_spec_lan_ac src -j SS_SPEC_TPROXY 

		if [ -f "$PREFIX/shadowsocks/safe.list" ]; then
			safelist=$PREFIX/shadowsocks/safe.list
			sed -e "s/^/-A ss_spec_lan_ac &/g" -e "1 i\-N ss_spec_lan_ac hash:net " $safelist | ipset -R -!		
		fi

		if [ "$adm_filter" == "1" ]; then
			[ ! $(ps | grep "adm" | grep -v "grep" | wc -l) -ge 1 ] && /opt/etc/init.d/S30adm start
			ipset -A ss_spec_wan_ac 188.188.188.188/32
			adm_put=$PREFIX/shadowsocks/adm_ignore.list
			if [ ! -f "$adm_put" ]; then
				sed -n '1,16p' $PREFIX/shadowsocks/ignore.list > $PREFIX/shadowsocks/adm_ignore.list
			fi
			iptables -t nat -N ADM_AC
			iptables -t nat -N ADM_FW
			sed -e "s/^/-A adm_wan_ac &/g" -e "1 i\-N adm_wan_ac hash:net " $adm_put | ipset -R -!
			ipset -N adm_lan_ac hash:net
			iptables -t nat -A ADM_AC -m set --match-set adm_wan_ac dst -j RETURN
			iptables -t nat -A ADM_AC -j ADM_FW
			iptables -t nat -A ADM_FW -p tcp --dport 80 -j REDIRECT --to-ports 18309
			iptables -t nat -A PREROUTING -p tcp --dport 80 -m set ! --match-set adm_lan_ac src -j ADM_AC
		fi			

		iptables-save | grep -E "SS_SPEC|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log		
		
		while :
		do
			iptables -t nat -L OUTPUT > /var/log/iptables.txt
			I=`cat /var/log/iptables.txt|grep -c multiport`
	
			if [ $I -ge 2 ]; then
				echo "same" >> /var/log/rules.log
				$PREFIX/shadowsocks/shadowsocks flush
				iptables -t nat -A SS_SPEC_WAN_AC -d $SS -j RETURN
#				iptables -t nat -A SS_SPEC_WAN_AC -d `sed -n '1p' /opt/var/log/resolvip.txt` -j RETURN
				iptables -t nat -A SS_SPEC_WAN_AC -m set --match-set ss_spec_wan_ac dst -j RETURN
				iptables -t nat -A SS_SPEC_WAN_AC -j SS_SPEC_WAN_FW
				iptables -t nat -A SS_SPEC_WAN_FW -p tcp -j REDIRECT --to-ports $PORT
#				iptables -t mangle -A SS_SPEC_TPROXY -d $SS -j RETURN
#				iptables -t mangle -A SS_SPEC_TPROXY -p udp -m set ! --match-set ss_spec_wan_ac dst -j TPROXY --on-port $PORT --tproxy-mark 0x01/0x01
				rm -f $PREFIX/shadowsocks/flush.lock
			else
				echo -e -n "$ansi_white Loading iptables rules... "
				sleep 1
				echo -e "            $ansi_green done. $ansi_std"
				echo "different" >> /var/log/rules.log
				exit 0
			fi
		done
	else
		ipset -N gfw_black_list hash:ip
		iptables -t nat -A PREROUTING -p tcp -m set --match-set gfw_black_list dst -j REDIRECT --to-port $PORT
		iptables -t nat -A OUTPUT -p tcp -m set --match-set gfw_black_list dst -j REDIRECT --to-port $PORT
		
		if [ "$adm_filter" == "1" ]; then
			[ ! $(ps | grep "adm" | grep -v "grep" | wc -l) -ge 1 ] && /opt/etc/init.d/S30adm start
			ipset -A ss_spec_wan_ac 188.188.188.188/32
			adm_put=$PREFIX/shadowsocks/adm_ignore.list
			if [ ! -f "$adm_put" ]; then
				sed -n '1,16p' $PREFIX/shadowsocks/ignore.list > $PREFIX/shadowsocks/adm_ignore.list
			fi
			iptables -t nat -N ADM_AC
			iptables -t nat -N ADM_FW
			sed -e "s/^/-A adm_wan_ac &/g" -e "1 i\-N adm_wan_ac hash:net " $adm_put | ipset -R -!
			ipset -N adm_lan_ac hash:net
			iptables -t nat -A ADM_AC -m set --match-set adm_wan_ac dst -j RETURN
			iptables -t nat -A ADM_AC -j ADM_FW
			iptables -t nat -A ADM_FW -p tcp --dport 80 -j REDIRECT --to-ports 18309
			iptables -t nat -A PREROUTING -p tcp --dport 80 -m set ! --match-set adm_lan_ac src -j ADM_AC
		fi
		
		iptables-save | grep -E "gfw_black|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log					
		
		rm -f /var/log/chnroutes.log
		echo "$(date): start gfwlist" >> /var/log/gfwlist.log 
	fi

	if [ -f "/var/log/ipset.lock" ]; then
		echo -e $INFO EXIT
	else
		echo "gfw_rules same" > /var/log/rules.log 
		ps | grep "set_up" | grep -v "grep" > /var/log/set_up.txt
		sed 's/^[ \t]\+//;s/[ \t].*//' /var/log/set_up.txt > /var/log/PID.TXT
		IPSET=`sed -n '1p' /var/log/PID.TXT`
		kill $IPSET
	fi	
	
	echo -e -n "$ansi_white Loading iptables rules... "
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	;;

"global" )
	IPSET=$(ipset -L | grep "1.0.1.0/24" | grep -v "grep")
	if [ -z "$IPSET" ]; then
		rm -f $PREFIX/shadowsocks/flush.lock
		$PREFIX/shadowsocks/shadowsocks flush
		$PREFIX/shadowsocks/shadowsocks rules
	else	
		LAN=$PREFIX/shadowsocks/lan.list
		sed -n '1,16p' $PREFIX/shadowsocks/ignore.list > $PREFIX/shadowsocks/lan.list
	
		ipset -F ss_spec_wan_ac &> /dev/null
		ipset -F ss_spec_lan_ac &> /dev/null
		sed -e "s/^/-A ss_spec_wan_ac &/g" -e "1 i\-N ss_spec_wan_ac hash:net " $LAN | ipset -R -!
		rm -f $PREFIX/shadowsocks/lan.list
	fi

	if [ -f "$PREFIX/shadowsocks/safe.list" ]; then
		safelist=$PREFIX/shadowsocks/safe.list
		sed -e "s/^/-A ss_spec_lan_ac &/g" -e "1 i\-N ss_spec_lan_ac hash:net " $safelist | ipset -R -!
	fi
	echo -e -n "$ansi_white Starting ignore... "
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"		
	;;
         
"flush" )
	echo -e -n "$ansi_white Flushing rules... "
	PORT=`cat /opt/etc/shadowsocks.json | awk -v RS=',' -F: '/"local_port"/ {print $2}'`

	if [ -f "$PREFIX/shadowsocks/dnsmasq.d/gfwlist.conf" ]; then
		iptables -t nat -D PREROUTING -p tcp -m set --match-set gfw_black_list dst -j REDIRECT --to-port $PORT &> /dev/null
		iptables -t nat -D OUTPUT -p tcp -m set --match-set gfw_black_list dst -j REDIRECT --to-port $PORT &> /dev/null
		sleep 1
		ipset destroy gfw_black_list &> /dev/null
	fi

	if [ "$adm_filter" == "1" ]; then
		iptables -t nat -D PREROUTING -p tcp --dport 80 -m set ! --match-set adm_lan_ac src -j ADM_AC &> /dev/null
		iptables -t nat -F ADM_AC &> /dev/null
		iptables -t nat -F ADM_FW &> /dev/null
		iptables -t nat -X ADM_AC &> /dev/null
		iptables -t nat -X ADM_FW &> /dev/null
		sleep 1
		ipset destroy adm_wan_ac &> /dev/null
		ipset destroy adm_lan_ac &> /dev/null
	fi		

	IFNAME=$(nvram get lan_ifname &> /dev/null)
	iptables -t nat -D PREROUTING ${IFNAME:+-i $IFNAME} -p tcp -m multiport --dports 22,80,443 -m set --match-set ss_spec_lan_ac src -j SS_SPEC_WAN_AC &> /dev/null
	iptables -t nat -D PREROUTING ${IFNAME:+-i $IFNAME} -p tcp -m multiport --dports 22,80,443 -m set ! --match-set ss_spec_lan_ac src -j SS_SPEC_WAN_AC &> /dev/null
	lan_ipaddr=`nvram get lan_ipaddr`
	iptables -t nat -D PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5353 &> /dev/null
	iptables -t nat -D PREROUTING -p tcp --dport 53 -j DNAT --to-destination $lan_ipaddr:53 &> /dev/null
	iptables -t nat -F SS_SPEC_WAN_AC &> /dev/null
	iptables -t nat -F SS_SPEC_WAN_FW &> /dev/null
	iptables -t nat -D OUTPUT ${IFNAME:+-o $IFNAME} -p tcp -m multiport --dports 22,80,443 -j SS_SPEC_WAN_AC &> /dev/null
 
	ip rule del fwmark 0x01/0x01 table 100 &> /dev/null 
	ip route del local 0.0.0.0/0 dev lo table 100 &> /dev/null 
	iptables -t mangle -F SS_SPEC_TPROXY &> /dev/null
	iptables -t mangle -D PREROUTING -p udp -m multiport --dports 22,80,443 -m set ! --match-set ss_spec_lan_ac src -j SS_SPEC_TPROXY &> /dev/null
	rm -f $PREFIX/shadowsocks/dns.list
	
	if [ -f "$PREFIX/shadowsocks/flush.lock" ]
	then
		rm -f $PREFIX/shadowsocks/flush.lock
	else
		
		iptables -t nat -X SS_SPEC_WAN_AC &> /dev/null
		iptables -t nat -X SS_SPEC_WAN_FW &> /dev/null
		iptables -t mangle -X SS_SPEC_TPROXY &> /dev/null
		ipset destroy ss_spec_wan_ac &> /dev/null
		ipset destroy ss_spec_lan_ac &> /dev/null
	fi			
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	;;

"update" )
	directory=$(cd $PREFIX/shadowsocks && ls | grep "dnsmasq.d" | grep -v "grep")
	if [ -z "$directory" ]; then
		cd $PREFIX/shadowsocks && mkdir dnsmasq.d
	fi

	if [ -f "$PREFIX/shadowsocks/ignore.list" ]; then
		rm -f $PREFIX/shadowsocks/ignore.list
	fi

	wget -q -t0 -O- $china_routing_list | grep ipv4 | grep CN | awk -F\| '{ printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > /var/log/ignore_tmp.txt	
	
	IGNORE_TEMP_LIST=/var/log/ignore_tmp.txt
	IGNORE_LIST=$PREFIX/shadowsocks/ignore.list

	cat > $IGNORE_LIST <<-EOF
	0.0.0.0/8
	10.0.0.0/8
	100.64.0.0/10
	127.0.0.0/8
	169.254.0.0/16
	172.16.0.0/12
	192.0.0.0/24
	192.0.2.0/24
	192.88.99.0/24
	192.168.0.0/16
	198.18.0.0/15
	198.51.100.0/24
	203.0.113.0/24
	224.0.0.0/4
	240.0.0.0/4
	255.255.255.255
	$(cat ${IGNORE_TEMP_LIST:=/dev/null} 2>/dev/null)
	EOF

	if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
		rm -f $CHECK/pcap-dnsproxy/Routing.txt $CHECK/pcap-dnsproxy/WhiteList.txt

		# Update Local Hosts
		cd /tmp;curl -s --insecure -O $china_domain_list;cd /
		echo -e '[Local Hosts]' >> /tmp/WhiteList.txt
		echo -e '## China mainland domains' >> /tmp/WhiteList.txt
		echo -e '## Get the latest database: https://github.com/xinhugo/Free-List/blob/master/WhiteList.txt' >> /tmp/WhiteList.txt
		echo -e '## Report an issue: https://github.com/xinhugo/Free-List/issues' >> /tmp/WhiteList.txt
		echo -e "## Last update: $DATE\n" >> /tmp/WhiteList.txt
		sed 's|/114.114.114.114$||' /tmp/accelerated-domains.china.conf > /tmp/WhiteList_tmp.txt
		sed -i 's|\(\.\)|\\\1|g' /tmp/WhiteList_tmp.txt
		sed -i 's|server=/|.*\\\b|' /tmp/WhiteList_tmp.txt
		sed -i 's|b\(cn\)$|\.\1|' /tmp/WhiteList_tmp.txt
		cat /tmp/WhiteList_tmp.txt >> /tmp/WhiteList.txt

		cd /tmp;curl -s --insecure -O $china_google_list;cd /
		sed 's|/114.114.114.114$||' /tmp/google.china.conf > /tmp/WhiteList_tmp.txt
		sed -i 's|\(\.\)|\\\1|g' /tmp/WhiteList_tmp.txt
		sed -i 's|server=/|.*\\\b|' /tmp/WhiteList_tmp.txt
		cat /tmp/WhiteList_tmp.txt >> /tmp/WhiteList.txt
		echo -e -n "$ansi_white Updating Local Hosts... "
		sleep 1
		echo -e "            $ansi_green done. $ansi_std"

		cp /tmp/WhiteList.txt $CHECK/pcap-dnsproxy
		rm -f /tmp/WhiteList_tmp.txt /tmp/WhiteList.txt /tmp/accelerated-domains.china.conf /tmp/google.china.conf
	
		# Update Local Routing
		curl -s --insecure $china_routing_list | grep ipv4 | grep CN | awk -F\| '{printf("%s/%d\n", $4, 32-log($5)/log(2))}' > /tmp/Routing_IPv4.txt
		echo -e '[Local Routing]' >> /tmp/Routing_IPv4_tmp.txt
		echo -e '## China mainland routing blocks' >> /tmp/Routing_IPv4_tmp.txt
		echo -e "## Last update: $DATE\n\n" >> /tmp/Routing_IPv4_tmp.txt
		echo -e '## IPv4' >> /tmp/Routing_IPv4_tmp.txt
		echo -e '## Get the latest database from APNIC -> https://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' >> /tmp/Routing_IPv4_tmp.txt
		cat /tmp/Routing_IPv4.txt >> /tmp/Routing_IPv4_tmp.txt

		curl -s --insecure $china_routing_list | grep ipv6 | grep CN | awk -F\| '{printf("%s/%d\n", $4, $5)}' > /tmp/Routing_IPv6.txt
		echo -e '## IPv6' >> /tmp/Routing_IPv6_tmp.txt
		echo -e '## Get the latest database from APNIC -> https://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' >> /tmp/Routing_IPv6_tmp.txt
		cat /tmp/Routing_IPv6.txt >> /tmp/Routing_IPv6_tmp.txt

		cat /tmp/Routing_IPv6_tmp.txt >> /tmp/Routing_IPv4_tmp.txt
		touch /tmp/Routing.txt
		cat /tmp/Routing_IPv4_tmp.txt >> /tmp/Routing.txt
		echo -e -n "$ansi_white Updating Local Routing... "
		sleep 1
		echo -e "            $ansi_green done. $ansi_std" 
	
		cp /tmp/Routing.txt $CHECK/pcap-dnsproxy
		rm -f /tmp/Routing_IPv4.txt /tmp/Routing_IPv4_tmp.txt /tmp/Routing_IPv6.txt /tmp/Routing_IPv6_tmp.txt /tmp/Routing.txt
	else
		wget -q -t0 -O- $china_routing_list | awk -F\| '/CN\|ipv4/ { printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > $CHECK/chnroute.txt
		cd $PREFIX/shadowsocks/dnsmasq.d/;curl -s --insecure -O $china_domain_list;cd /
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		sed -i "s|^\(server.*\)/[^/]*$|\1/$DNS|" $PREFIX/shadowsocks/dnsmasq.d/accelerated-domains.china.conf
	fi

	rm -f $PREFIX/shadowsocks/dns.list
	rm -f $IGNORE_TEMP_LIST
	
	if [ -f "$PREFIX/shadowsocks/update.lock" ]; then
		echo '['$DATE'] Has loaded China route table.' > /var/log/chnroutes.log
	else
		if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
			/opt/etc/init.d/S27pcap-dnsproxy restart
			rm -r $PREFIX/shadowsocks/flush.lock &> /dev/null 
			$PREFIX/shadowsocks/shadowsocks flush
			sleep 1
			$PREFIX/shadowsocks/shadowsocks rules
			service dnsmasq restart	
		else
			/opt/etc/init.d/S24chinadns restart
			rm -r $PREFIX/shadowsocks/flush.lock &> /dev/null
			$PREFIX/shadowsocks/shadowsocks flush
			sleep 1
			$PREFIX/shadowsocks/shadowsocks rules
			service dnsmasq restart && [ -f "/var/log/dnscrypt-proxy.lock" ] && /opt/etc/init.d/S29dnscrypt-proxy start	
		fi
	fi
	echo -e -n "$ansi_white Updating chnroutes... "
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"	
	;;

"update_gfwlist" )
	echo -e -n "$ansi_white Updating gfwlist... "
	directory=$(cd $PREFIX/shadowsocks && ls | grep "dnsmasq.d" | grep -v "grep")
	if [ -z "$directory" ]; then
		cd $PREFIX/shadowsocks && mkdir dnsmasq.d
	fi
		
	DNS=127.0.0.1#1054
		
	wget -q -t0 -O $PREFIX/shadowsocks/dnsmasq.d/gfwlist.conf $gfw_block_list
		
	sed -i "s|^\(server.*\)/[^/]*$|\1/$DNS|" $PREFIX/shadowsocks/dnsmasq.d/gfwlist.conf
	sed -i "s|^\(ipset.*\)/[^/]*$|\1/gfw_black_list|" $PREFIX/shadowsocks/dnsmasq.d/gfwlist.conf
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	service dnsmasq restart
	;;
	
"check" )
	SHADOWSOCKS=$(ps | grep "ss-redir" | grep -v "grep")
	if [ -f "/var/log/shadowsocks.lock" ]; then
		if [ -z "$SHADOWSOCKS" ]; then
        		echo '['$DATE'] Shadowsoks abnormal operation, restarting shadowsocks.' >> /var/log/shadowsocks_watchdog.log 2>&1
			/opt/etc/init.d/S22shadowsocks start
		else
      			echo '['$DATE'] No problem, the normal operation of shadowsoks.' >> /var/log/shadowsocks_watchdog.log 2>&1
		fi
	fi		

	if [ -f "/var/log/admflt.lock" ]; then
		if [ $(ps|grep adm|grep -v grep|wc -l) -gt 1 ]; then
			echo '['$DATE'] No problem, the normal operation of admflt.' >> /var/log/admflt.log 2>&1
		else
			echo '['$DATE'] admflt abnormal operation, restarting admflt.' >> /var/log/admflt.log 2>&1
			/opt/etc/init.d/S30adm start
		fi
	fi	
	
	dnscrypt=$(ps | grep "dnscrypt-proxy" | grep -v "grep")
	if [ -f "/var/log/dnscrypt-proxy.lock" ]; then
		if [ -z "$dnscrypt" ]; then
			echo '['$DATE'] dnscrypt-proxy abnormal operation, restarting dnscrypt-proxy.' >> /var/log/dnscrypt-proxy_watchdog.log 2>&1
#			/opt/etc/init.d/S29dnscrypt-proxy start
		else
			echo '['$DATE'] No problem, the normal operation of dnscrypt-proxy.' >> /var/log/dnscrypt-proxy_watchdog.log 2>&1
		fi
	fi	
	
	Pcap_DNSProxy=$(ps | grep "Pcap_DNSProxy" | grep -v "grep")
	if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
		if [ -z "$Pcap_DNSProxy" ]; then
			echo '['$DATE'] Pcap_DNSProxy abnormal operation, restarting Pcap_DNSProxy.' >> /var/log/Pcap_DNSProxy_watchdog.log 2>&1
#			/opt/etc/init.d/S27pcap_dnsproxy start
		else
			echo '['$DATE'] No problem, the normal operation of Pcap_DNSProxy.' >> /var/log/Pcap_DNSProxy_watchdog.log 2>&1
		fi
	fi

	PDNSD=$(ps | grep "pdnsd" | grep -v "grep")
	if [ -f "/var/log/pdnsd.lock" ]; then	
		if [ -z "$PDNSD" ]; then
			echo '['$DATE'] Pdnsd abnormal operation, restarting pdnsd.' >> /var/log/pdnsd_watchdog.log 2>&1
#			/opt/etc/init.d/S26pdnsd start
		else
			echo '['$DATE'] No problem, the normal operation of pdnsd.' >> /var/log/pdnsd_watchdog.log 2>&1
		fi
	fi	

	OLD_WAN_IP=`cat /var/log/wan_ipaddr.log`
	if [ ! $OLD_WAN_IP == `nvram get wan_ppp_get_ip` ]; then
		iptables -t nat -I SS_SPEC_WAN_AC 2 -d `nvram get wan_ppp_get_ip` -j RETURN
	fi
	
	judge=$(cd $PREFIX/shadowsocks && ls | grep "ignore.list" | grep -v "grep")
	if [ -z "$judge" ]; then
		exit 0
	else
		CHINADNS=$(ps | grep "chinadns" | grep -v "grep")
		if [ -f "/var/log/chinadns.lock" ]; then
			if [ -z "$CHINADNS" ]; then
				echo '['$DATE'] ChinaDNS is restarting.' >> /var/log/chinadns_watchdog.log 2>&1
#				/opt/etc/init.d/S24chinadns start
			else
				echo '['$DATE'] ChinaDNS no problem.' >> /var/log/chinadns_watchdog.log 2>&1
			fi
		fi
	fi		
	;;

"check_rules" )
	restore=/var/log/iptables-restore.log
	adm_put=/mnt/sda1/shadowsocks/adm_ignore.list
	
	if [ -f "$PREFIX/shadowsocks/ignore.list" ]; then
		if [ "`iptables -t nat -nvL | grep "SS_SPEC_WAN_AC" | wc -l`" -eq 3 ]; then
			echo '['$DATE'] iptables rules no problem.' >> /var/log/iptables_rules.log 2>&1
		else
			echo '['$DATE'] iptables rules incomplete.' >> /var/log/iptables_rules.log 2>&1
			rm -f $PREFIX/shadowsocks/flush.lock
			$PREFIX/shadowsocks/shadowsocks flush

			_input=/mnt/sda1/shadowsocks/ignore.list

			ipset -N ss_spec_lan_ac hash:net
			sed -e "s/^/-A ss_spec_wan_ac &/g" -e "1 i\-N ss_spec_wan_ac hash:net " $_input | ipset -R -!

			if [ "$adm_filter" == "1" ]; then
				sed -e "s/^/-A adm_wan_ac &/g" -e "1 i\-N adm_wan_ac hash:net " $adm_put | ipset -R -!
				ipset -N adm_lan_ac hash:net
			fi

			iptables-restore <<-EOF
			$(cat ${restore:=/dev/null} 2>/dev/null)
			COMMIT
			EOF

			iptables-save | grep -E "SS_SPEC|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log
		fi
	else
		if [ "`iptables -t nat -nvL | grep "gfw_black_list" | wc -l`" -eq 2 ]; then
			echo '['$DATE'] iptables rules no problem.' >> /var/log/iptables_rules.log 2>&1
		else
			echo '['$DATE'] iptables rules incomplete.' >> /var/log/iptables_rules.log 2>&1
			rm -f $PREFIX/shadowsocks/flush.lock
			$PREFIX/shadowsocks/shadowsocks flush
			
			ipset -N gfw_black_list hash:ip
			
			if [ "$adm_filter" == "1" ]; then
				sed -e "s/^/-A adm_wan_ac &/g" -e "1 i\-N adm_wan_ac hash:net " $adm_put | ipset -R -!
				ipset -N adm_lan_ac hash:net
			fi

			iptables-restore <<-EOF
			$(cat ${restore:=/dev/null} 2>/dev/null)
			COMMIT
			EOF

			iptables-save | grep -E "gfw_black|ADM_|WANPREROUTING|POSTROUTING|^\*nat" > /var/log/iptables-restore.log
		fi
	fi
	;;
	
"ss_switch" )
	ask_yes_or_no() {
    		read -p "$1 ([y]es or [n]o): "
    		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        		y|yes) echo "yes" ;;
        		*)     echo "no" ;;
    		esac
	}
	
	sed -i "/^[ \t]\+iptables -t nat -A SS_SPEC_WAN_AC -d \`sed -n '1p' \/opt\/var\/log\/resolvip.txt\` -j RETURN/s/^/#/" $PREFIX/shadowsocks/shadowsocks
	sed -i '/^#[ \t]\+iptables -t nat -A SS_SPEC_WAN_AC -d $SS -j RETURN/s/^#//' $PREFIX/shadowsocks/shadowsocks
	echo -e $INFO Please select $BOLD server $NORM or $BOLD JSON file $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "Select JSON file?") ]; then
		echo -e $INFO Creating JSON file...
		rm -f $CHECK/shadowsocks.json

		echo "============================================"
		echo "Please input your shadowsocks account imformation:"
		read -p "(Your Server IP):" IP
		read -p "(Your Server Port):" port
		read -p "(Your Local Port):" PORT
		read -p "(Your Password):" password
		read -p "(Your Encryption Method):" method
		echo "============================================"
		echo "Please confirm your shadowsocks imformation:"
		echo -e "Your Server IP: \033[41;37m ${IP} \033[0m"
		echo -e "Your Server Port: \033[41;37m ${port} \033[0m"
		echo -e "Your Server Port: \033[41;37m ${PORT} \033[0m"
		echo -e "Your Password: \033[41;37m ${password} \033[0m"
		echo -e "Your Encryption Method: \033[41;37m ${method} \033[0m"
		echo "============================================"

		resolvip -t 10 ${IP} > /opt/var/log/resolvip_tmp.txt
		if [ `cat /opt/var/log/resolvip_tmp.txt | cut -d"." -f1` == `resolvip -t 10 192. | cut -d"." -f1` ]; then
			echo -e "$WARNING You input an incorrect IP, please re-enter your: $ansi_white \nshadowsocks ss_switch"$NORM				
			exit 0					
		fi		
		server_ip=/opt/var/log/resolvip_tmp.txt
		
		get_server_ip() {
			cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
				$(cat ${server_ip=:/dev/null} 2>/dev/null)	
		EOF
		}
		echo $(get_server_ip) > /opt/var/log/resolvip.txt
		sed -i '/^$/d' /opt/var/log/resolvip.txt		
		if [ -s "/opt/var/log/resolvip.txt" ]; then
			echo -e -n $ss_switch
			RIP=`sed -n '1p' /opt/var/log/resolvip.txt`
			cat > $CHECK/shadowsocks.json <<-end
{
    "server":"$RIP",
    "server_port":${port},
    "local_address":"0.0.0.0",
    "local_port":${PORT},
    "password":"${password}",
    "timeout":60,
    "method":"${method}"
}
			end
			sed -i '11d' $CHECK/shadowsocks.json
			echo ${PORT} > /opt/var/log/local_port.txt			
			sleep 1 
			echo -e "$ansi_green PASS. $ansi_std"			
		else
			echo -e -n $ss_switch
			sleep 1 
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING Can not write the configuration information, please re-enter your: $ansi_white \nshadowsocks ss_switch"$NORM
			exit 0			
		fi	
	else
		echo -e $INFO Creating server file...
		echo "============================================"
		echo "Please input your shadowsocks account imformation:"
		read -p "(Your Server IP):" IP
		echo "============================================"
		echo "Please confirm your shadowsocks imformation:"
		echo -e "Your Server IP: \033[41;37m ${IP} \033[0m"
		echo "============================================"

		resolvip -t 10 ${IP} > /opt/var/log/resolvip_tmp.txt
		if [ `cat /opt/var/log/resolvip_tmp.txt | cut -d"." -f1` == `resolvip -t 10 192. | cut -d"." -f1` ]; then
			echo -e "$WARNING You input an incorrect IP, please re-enter your: $ansi_white \nshadowsocks mult_switch"$NORM				
			exit 0					
		fi		
		server_ip=/opt/var/log/resolvip_tmp.txt
		
		get_server_ip() {
			cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
				$(cat ${server_ip=:/dev/null} 2>/dev/null)	
		EOF
		}
		echo $(get_server_ip) > /opt/var/log/resolvip.txt
		sed -i '/^$/d' /opt/var/log/resolvip.txt
		if [ -s "/opt/var/log/resolvip.txt" ]; then
			echo -e -n $ss_switch
			RIP=`sed -n '1p' /opt/var/log/resolvip.txt`
			sed -i 's/\("server":"\).*/\1'"$RIP"'",/g' $CHECK/shadowsocks.json
			sleep 1 
			echo -e "$ansi_green PASS. $ansi_std"		
		else
			echo -e -n $ss_switch
			sleep 1 
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING Can not write IP, please re-enter your: $ansi_white \nshadowsocks ss_switch"$NORM
			exit 0
		fi
	fi

	$PREFIX/shadowsocks/shadowsocks run
	service dnsmasq restart && [ -f "/var/log/dnscrypt-proxy.lock" ] && /opt/etc/init.d/S29dnscrypt-proxy start
	;;

"mult_switch" )
	ask_yes_or_no() {
    		read -p "$1 ([y]es or [n]o): "
    		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        		y|yes) echo "yes" ;;
        		*)     echo "no" ;;
    		esac
	}	

	echo -e $INFO $BOLD Do you want to use multiple accounts $NORM?  "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "I WANT?") ]; then
		i=1
		while :
		do
		echo -e "Enter your shadowsocks configuration information:\n\
Your config:"
   		read CONFIG
   			if [[ ${CONFIG} != "" ]]  &> /dev/null
   			then
				echo "============================================"
				echo "Please input your shadowsocks account imformation:"
				read -p "(Your Server IP):" IP
				read -p "(Your Server Port):" port
				read -p "(Your Local Port):" PORT
				read -p "(Your Password):" password
				read -p "(Your Encryption Method):" method
				echo "============================================"
				echo "Please confirm your shadowsocks imformation:"
				echo -e "Your Server IP: \033[41;37m ${IP} \033[0m"
				echo -e "Your Server Port: \033[41;37m ${port} \033[0m"
				echo -e "Your Server Port: \033[41;37m ${PORT} \033[0m"
				echo -e "Your Password: \033[41;37m ${password} \033[0m"
				echo -e "Your Encryption Method: \033[41;37m ${method} \033[0m"
				echo "============================================"
				
				resolvip -t 10 ${IP} > /opt/var/log/resolvip_tmp.txt
				if [ `cat /opt/var/log/resolvip_tmp.txt | cut -d"." -f1` == `resolvip -t 10 192. | cut -d"." -f1` ]; then
					echo -e "$WARNING You input an incorrect IP, please re-enter your: $ansi_white \nshadowsocks mult_switch"$NORM				
					exit 0					
				fi				
				server_ip=/opt/var/log/resolvip_tmp.txt

				get_server_ip() {
					cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
						$(cat ${server_ip=:/dev/null} 2>/dev/null)	
				EOF
				}
				echo $(get_server_ip) > /opt/var/log/resolvip.txt
				sed -i '/^$/d' /opt/var/log/resolvip.txt
				if [ -s "/opt/var/log/resolvip.txt" ]; then
					echo -e -n $mult_switch	
					RIP=`sed -n '1p' /opt/var/log/resolvip.txt`
					cat > $CHECK/$CONFIG <<-end
{
    "server":"$RIP",
    "server_port":${port},
    "local_address":"0.0.0.0",
    "local_port":${PORT},
    "password":"${password}",
    "timeout":60,
    "method":"${method}"
}
					end
					sed -i '11d' $CHECK/$CONFIG
					sleep 1 
					echo -e "$ansi_green PASS. $ansi_std"
				else
					echo -e -n $mult_switch
					sleep 1 
					echo -e "$ansi_red ERROR. $ansi_std"
					echo -e "$WARNING Can not write the configuration information, please re-enter your: $ansi_white \nshadowsocks mult_switch"$NORM
					exit 0
				fi
   			else
				exit 0
   			fi
   			let i++
		done
	fi	

	echo -e $INFO $BOLD "Choose Your ShadowSocks As Below: $NORM\n\
$BOLD##0##:$NORM Input My Own ShadowSocks\n\
$BOLD##1##:$NORM ShadowSocks_0\n\
$BOLD##1##:$NORM ShadowSocks_1\n\
$BOLD##2##:$NORM ShadowSocks_2\n\
$BOLD##3##:$NORM ShadowSocks_3\n\
$BOLD##4##:$NORM ShadowSocks_4\n\
$BOLD##5##:$NORM ShadowSocks_5\n\
$BOLD##6##:$NORM ShadowSocks_6\n\
Your Choice(Direct enter 0 is Restore Default):"
	read ShadowSocks
	if [ $ShadowSocks = "0" ];
	then
		echo -e "$BOLD Restore Default..." $NORM
		JSON=`sed -n '1p' /opt/var/log/shadowsocks.log`
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json  > /opt/var/log/resolvip.txt
		sed -i 's/'"$JSON"'/ARGS="-c \/opt\/etc\/shadowsocks.json"/g' $CHECK/init.d/S22shadowsocks   
	elif [ $ShadowSocks = "1" ];
	then
		echo -e "$BOLD Set ShadowSocks_1..." $NORM 
		echo 'ARGS="-c \/opt\/etc\/shadowsocks_1.json"' > /opt/var/log/shadowsocks.log
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks_1.json  > /opt/var/log/resolvip.txt
		sed -i 's/ARGS="-c \/opt\/etc\/shadowsocks.json"/ARGS="-c \/opt\/etc\/shadowsocks_1.json"/g' $CHECK/init.d/S22shadowsocks
	elif [ $ShadowSocks = "2" ];
	then
		echo -e "$BOLD Set ShadowSocks_2..." $NORM
		echo 'ARGS="-c \/opt\/etc\/shadowsocks_2.json"' > /opt/var/log/shadowsocks.log
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks_2.json  > /opt/var/log/resolvip.txt
		sed -i 's/ARGS="-c \/opt\/etc\/shadowsocks.json"/ARGS="-c \/opt\/etc\/shadowsocks_2.json"/g' $CHECK/init.d/S22shadowsocks
	elif [ $ShadowSocks = "3" ];
	then
		echo -e "$BOLD Set ShadowSocks_3..." $NORM
		echo 'ARGS="-c \/opt\/etc\/shadowsocks_3.json"' > /opt/var/log/shadowsocks.log
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks_3.json  > /opt/var/log/resolvip.txt
		sed -i 's/ARGS="-c \/opt\/etc\/shadowsocks.json"/ARGS="-c \/opt\/etc\/shadowsocks_3.json"/g' $CHECK/init.d/S22shadowsocks
	elif [ $ShadowSocks = "4" ];
	then
		echo -e "$BOLD Set ShadowSocks_4..." $NORM
		echo 'ARGS="-c \/opt\/etc\/shadowsocks_4.json"' > /opt/var/log/shadowsocks.log
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks_4.json  > /opt/var/log/resolvip.txt
		sed -i 's/ARGS="-c \/opt\/etc\/shadowsocks.json"/ARGS="-c \/opt\/etc\/shadowsocks_4.json"/g' $CHECK/init.d/S22shadowsocks
	elif [ $ShadowSocks = "5" ];
	then
		echo -e "$BOLD Set ShadowSocks_5..." $NORM
		echo 'ARGS="-c \/opt\/etc\/shadowsocks_5.json"' > /opt/var/log/shadowsocks.log
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks_5.json  > /opt/var/log/resolvip.txt
		sed -i 's/ARGS="-c \/opt\/etc\/shadowsocks.json"/ARGS="-c \/opt\/etc\/shadowsocks_5.json"/g' $CHECK/init.d/S22shadowsocks
	elif [ $ShadowSocks = "6" ];
	then
		echo -e "$BOLD Set ShadowSocks_6..." $NORM
		echo 'ARGS="-c \/opt\/etc\/shadowsocks_6.json"' > /opt/var/log/shadowsocks.log
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks_6.json  > /opt/var/log/resolvip.txt
		sed -i 's/ARGS="-c \/opt\/etc\/shadowsocks.json"/ARGS="-c \/opt\/etc\/shadowsocks_6.json"/g' $CHECK/init.d/S22shadowsocks
	fi

	sed -i '/^[ \t]\+iptables -t nat -A SS_SPEC_WAN_AC -d $SS -j RETURN/s/^/#/' $PREFIX/shadowsocks/shadowsocks
	sed -i "/^#[ \t]\+iptables -t nat -A SS_SPEC_WAN_AC -d \`sed -n '1p' \/opt\/var\/log\/resolvip.txt\` -j RETURN/s/^#//" $PREFIX/shadowsocks/shadowsocks

	echo -e $INFO Please select $BOLD GFWLIST $NORM switch or switch $BOLD CHNROUTES $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "Select GFWLIST?") ]; then
		echo -e $INFO Switch GFWLIST...
		/opt/etc/init.d/S22shadowsocks restart
		service dnsmasq restart
	else
		echo -e $INFO Switch CHNROUTES...		
		/opt/etc/init.d/S22shadowsocks restart
#		/opt/etc/init.d/S23ss-tunnel restart
		rm -f $PREFIX/shadowsocks/flush.lock
		$PREFIX/shadowsocks/shadowsocks flush
		sleep 2
		$PREFIX/shadowsocks/shadowsocks rules
		service dnsmasq restart && [ -f "/var/log/dnscrypt-proxy.lock" ] && /opt/etc/init.d/S29dnscrypt-proxy start		
	fi
	;;	

"lan_ignore" )
		ask_yes_or_no() {
    		read -p "$1 ([y]es or [n]o): "
    		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        		y|yes) echo "yes" ;;
        		*)     echo "no" ;;
    		esac
	}

	echo -e $INFO $BOLD Remove all network access restrictions IP$NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "Remove?") ]; then
		echo -e "---------$BOLD[The following is to be limited to IP:]$NORM----------"
		cat $PREFIX/shadowsocks/safe.list
		if [ "yes" == $(ask_yes_or_no "Sure?") ]; then	
			safelist=$PREFIX/shadowsocks/safe.list
			sed -e "s/^/-D ss_spec_lan_ac &/g" -e "1 i\-N ss_spec_lan_ac hash:net " $safelist | ipset -R -!
			rm -f $PREFIX/shadowsocks/safe.list
			exit 0
		fi
	fi
		
	echo -e "---$BOLD[NAME]$NORM--------------$BOLD[IP]$NORM-------------$BOLD[MAC]$NORM--------------"
	arp > /opt/var/log/arp.list
	awk '{gsub(/[()]|at/,"");NF-=3}1' /opt/var/log/arp.list
	awk '{gsub(/[()]|at/,"");NF-=3}1' /opt/var/log/arp.list > /opt/var/log/arplist.list
	echo "-----------------------------------------------------------"	
	
	echo -e $INFO Select $BOLD Custom $NORM or $BOLD All $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "All?") ]; then
		echo -e $INFO Select $BOLD List only allowed within $NORM? or $BOLD List allows only outside $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
		if [ "yes" == $(ask_yes_or_no "List only allowed within?") ]; then
			awk '{print $2}' /opt/var/log/arplist.list > $PREFIX/shadowsocks/safe.list
			safelist=$PREFIX/shadowsocks/safe.list
			touch /opt/var/log/allowed_within.lock
			$PREFIX/shadowsocks/shadowsocks flush && $PREFIX/shadowsocks/shadowsocks flush
			sleep 1
			$PREFIX/shadowsocks/shadowsocks rules
			sed -e "s/^/-A ss_spec_lan_ac &/g" -e "1 i\-N ss_spec_lan_ac hash:net " $safelist | ipset -R -!
			exit 0
		else
			awk '{print $2}' /opt/var/log/arplist.list > $PREFIX/shadowsocks/safe.list
			safelist=$PREFIX/shadowsocks/safe.list
			rm -f /opt/var/log/allowed_within.lock
			$PREFIX/shadowsocks/shadowsocks flush && $PREFIX/shadowsocks/shadowsocks flush
			sleep 1
			$PREFIX/shadowsocks/shadowsocks rules
			sed -e "s/^/-A ss_spec_lan_ac &/g" -e "1 i\-N ss_spec_lan_ac hash:net " $safelist | ipset -R -!
			exit 0
		fi
	fi

	echo -e $INFO Select $BOLD List only allowed within $NORM? or $BOLD List allows only outside $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "List only allowed within?") ]; then
		i=1
		sed -i '/^$/d' $PREFIX/shadowsocks/safe.list		
		echo "please input your ips: "
		while :
		do
   			read ip
   			if [[ ${ip} != "" ]]  &> /dev/null && echo -e $INFO OK!
   			then
				get_lan_ip() {
					cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
						${ip}
				EOF
				}
				echo $(get_lan_ip) >> $PREFIX/shadowsocks/safe.list
				grep -n '^$' $PREFIX/shadowsocks/safe.list > /dev/null;echo $? > /tmp/null.log
				null=`cat /tmp/null.log`
				[ "$null" == "0" ] && exit 0
   			else
				echo -e $INFO OK!
				safelist=$PREFIX/shadowsocks/safe.list
				touch /opt/var/log/allowed_within.lock
				$PREFIX/shadowsocks/shadowsocks flush && $PREFIX/shadowsocks/shadowsocks flush
				sleep 1
				$PREFIX/shadowsocks/shadowsocks rules
				sed -e "s/^/-A ss_spec_lan_ac &/g" -e "1 i\-N ss_spec_lan_ac hash:net " $safelist | ipset -R -!		
     				exit 0
   			fi
   			let i++
		done
	else
		i=1
		sed -i '/^$/d' $PREFIX/shadowsocks/safe.list		
		echo "please input your ips: "
		while :
		do
   			read ip
   			if [[ ${ip} != "" ]]  &> /dev/null && echo -e $INFO OK!
   			then
				get_lan_ip() {
					cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
						${ip}
				EOF
				}
				echo $(get_lan_ip) >> $PREFIX/shadowsocks/safe.list
				grep -n '^$' $PREFIX/shadowsocks/safe.list > /dev/null;echo $? > /tmp/null.log
				null=`cat /tmp/null.log`
				[ "$null" == "0" ] && exit 0
   			else
				echo -e $INFO OK!
				safelist=$PREFIX/shadowsocks/safe.list
				rm -f /opt/var/log/allowed_within.lock
				$PREFIX/shadowsocks/shadowsocks flush && $PREFIX/shadowsocks/shadowsocks flush
				sleep 1
				$PREFIX/shadowsocks/shadowsocks rules
				sed -e "s/^/-A ss_spec_lan_ac &/g" -e "1 i\-N ss_spec_lan_ac hash:net " $safelist | ipset -R -!				
     				exit 0
   			fi
   			let i++
		done
	fi	
	;;

"off_on" )
	ask_yes_or_no() {
    		read -p "$1 ([y]es or [n]o): "
    		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        		y|yes) echo "yes" ;;
        		*)     echo "no" ;;
    		esac
	}
	
	SHADOWSOCKS=$(ps|grep ss-redir|grep -v grep|wc -l)
	if [ $SHADOWSOCKS -ge 1 ]; then
		echo -e $INFO ShadowSocks is closing 
		killall ss-redir
		$PREFIX/shadowsocks/shadowsocks flush
		rm -f /var/log/shadowsocks.lock		
	else
		echo -e $INFO ShadowSocks has been shut down
		echo -e $INFO Whether to $BOLD open again shadowsocks $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
		if [ "yes" == $(ask_yes_or_no "Open?") ]; then
			/opt/etc/init.d/S22shadowsocks start
			$PREFIX/shadowsocks/shadowsocks flush
			$PREFIX/shadowsocks/shadowsocks rules
			touch /var/log/shadowsocks.lock
		else
			exit 0
		fi		
	fi
	;;			

"temp" )
	if [ ! -f "/var/log/xiaomi_fan.lock" ]; then	
		if [ "$xiaomi_fan" == "1" ]; then
			echo -e -n "$ansi_white Setting XIAOMI Fan Mode... "
			touch /var/log/xiaomi_fan.lock
			nvram set fanctrl_dutycycle=2
			nvram commit
			shadowsocks temp
			sleep 1
			echo -e "            $ansi_green done. $ansi_std"
		else
			exit 0
		fi
	fi

	if [ ! $(cat $CHECK/cron.1min/check.sh | grep "temp" | grep -v "grep" | wc -l) -ge 1 ]; then
		sed -i '/^$/d' $CHECK/cron.1min/check.sh
		echo "shadowsocks temp" >> $CHECK/cron.1min/check.sh
		mkdir -p $CHECK/sch_script
		sed -i '/^$/d' $CHECK/crontab
		sed -i '$i\0 8 * * * root /opt/bin/run-parts /opt/etc/sch_script\' $CHECK/crontab
		sed -i '/^$/d' $CHECK/crontab		
		echo "sed -i 's/#\(shadowsocks temp\)/\1/' $CHECK/cron.1min/check.sh" > $CHECK/sch_script/temp_s.sh
		echo "shadowsocks temp_s" > $CHECK/cron.daily/temp_s.sh
	fi
	
	T=`cat /proc/dmu/temperature | cut -f 3 -d" " | cut -c 1,2 | grep "^[0-9]\{2\}"`

	if [ $T -lt 80 ]; then
		NEWSPEED=2
	elif [ $T -ge 80 -a $T -lt 90 ];then
		NEWSPEED=3
	elif [ $T -ge 90 -a $T -lt 100 ];then
		NEWSPEED=4
	else
		NEWSPEED=2
	fi

	OLDSPEED=`nvram get fanctrl_dutycycle`
	if [ $OLDSPEED -ne $NEWSPEED ]; then
		nvram set fanctrl_dutycycle=$NEWSPEED
		nvram commit
	fi 
	;;

"temp_s" )
	TC=$(cat $CHECK/cron.1min/check.sh | grep "temp" | grep -v "grep")
	if [ -n "$TC" ]; then
		sed -i 's/\(^shadowsocks temp\)/#\1/' $CHECK/cron.1min/check.sh
	fi

	nvram set fanctrl_dutycycle=1
	nvram commit
	;;

"update_scr" )	
	ask_yes_or_no() {
    		read -p "$1 ([y]es or [n]o): "
    		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        		y|yes) echo "yes" ;;
        		*)     echo "no" ;;
    		esac
	}

	if [ ! "$SCRIPT_DIR" == "$PREFIX" ]; then
		sed -i 's;PREFIX='"$PREFIX"';PREFIX='"$SCRIPT_DIR"';' $SCRIPT_DIR/shadowsocks
	fi	
	
	echo -e $INFO Choose $BOLD CHNROUTES or GFWLIST $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "CHNROUTES?") ]; then 
		if [ "yes" == $(ask_yes_or_no "ss-redir?") ]; then
			echo -e $INFO Is updating the script......				
			if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
				sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S27pcap-dnsproxy (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks 
			else
				sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
				[ -f "/var/log/pdnsd.lock" ] && sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S26pdnsd (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
				[ -f "/var/log/dnscrypt-proxy.lock" ] && sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S29dnscrypt-proxy (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
			fi
		else
			echo -e $INFO Is updating the script......
			sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S23ss-tunnel (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
			sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		fi
	else
		echo -e $INFO Is updating the script......
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S26pdnsd (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
	fi
	
	echo -e -n $update_scr
	sleep 1 
	echo -e "$ansi_green PASS. $ansi_std"	
	;;	

"rebuild_scr" )
	touch /var/log/rebuild.lock
	echo -e $INFO Choose $BOLD CHNROUTES or GFWLIST $NORM? "\033[4m yes \033[0m"  or "\033[4m no \033[0m"
	if [ "yes" == $(ask_yes_or_no "CHNROUTES?") ]; then 
		if [ "yes" == $(ask_yes_or_no "ss-redir?") ]; then
			echo -e $INFO Is rebuilding the script......
			if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
				rm -f $PREFIX/shadowsocks/ignore.list && rm -f $PREFIX/opt/var/log/* &> /dev/null
				rm -f $CHECK/ch*
				rm -rf $PREFIX/shadowsocks/dnsmasq.d
				sleep 1
				if [ -f "/opt/var/log/shadowsocks.log" ]; then
					JSON=`sed -n '1p' /opt/var/log/shadowsocks.log`
					sed -i 's/'"$JSON"'/ARGS="-c \/opt\/etc\/shadowsocks.json"/g' $CHECK/init.d/S22shadowsocks
				fi
				sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-redir/PROCS=ss-local/" -i  $CHECK/init.d/S22shadowsocks
				sed -i 's/^\([ \t]\+\/opt\/etc\/init.d\/S27pcap-dnsproxy start\)/#\1/' $PREFIX/shadowsocks/shadowsocks
				sed -i 's/^\([ \t]\+iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5353\)/#\1/' $PREFIX/shadowsocks/shadowsocks
#				sed -i 's/^\([ \t]\+iptables -t nat -A PREROUTING -p tcp --dport 53 -j DNAT --to-destination $lan_ipaddr:53\)/#\1/' $PREFIX/shadowsocks/shadowsocks
				sleep 1
				killall ss-redir
				killall Pcap_DNSProxy
				[ -f "$PREFIX/shadowsocks/flush.lock" ] && rm -f $PREFIX/shadowsocks/flush.lock
				$PREFIX/shadowsocks/shadowsocks flush	
				sleep 1
				rm -f /var/log/admflt.lock
				rm -f /var/log/shadowsocks.lock	
				rm -f /var/log/pcap_dnsproxy.lock
			else					
				rm -f $PREFIX/shadowsocks/ignore.list && rm -f $CHECK/init.d/S24chinadns && rm -f $PREFIX/opt/var/log/* &> /dev/null
				rm -f $CHECK/ch*
				rm -rf $PREFIX/shadowsocks/dnsmasq.d
				sleep 1
				if [ -f "/opt/var/log/shadowsocks.log" ]; then
					JSON=`sed -n '1p' /opt/var/log/shadowsocks.log`
					sed -i 's/'"$JSON"'/ARGS="-c \/opt\/etc\/shadowsocks.json"/g' $CHECK/init.d/S22shadowsocks
				fi 
				sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-redir/PROCS=ss-local/" -i  $CHECK/init.d/S22shadowsocks
				sed -i 's/^\([ \t]\+\/opt\/etc\/init.d\/S24chinadns start\)/#\1/' $PREFIX/shadowsocks/shadowsocks
				sed -i 's/^\([ \t]\+\/opt\/etc\/init.d\/S26pdnsd start\)/#\1/' $PREFIX/shadowsocks/shadowsocks
				sed -i 's/^\([ \t]\+\/opt\/etc\/init.d\/S29dnscrypt-proxy start\)/#\1/' $PREFIX/shadowsocks/shadowsocks
				sleep 1
				killall ss-redir && killall chinadns && killall pdnsd killall dnscrypt-proxy
				[ -f "$PREFIX/shadowsocks/flush.lock" ] && rm -f $PREFIX/shadowsocks/flush.lock
				$PREFIX/shadowsocks/shadowsocks flush
				sleep 1
				rm -f /var/log/admflt.lock					
				rm -f /var/log/chinadns.lock
				rm -f /var/log/pdnsd.lock
				rm -f /var/log/shadowsocks.lock
				rm -f /var/log/dnscrypt-proxy.lock
			fi
		else
			echo -e $INFO Is rebuilding the plan script......
			rm -f $PREFIX/shadowsocks/ignore.list && rm -f $CHECK/init.d/S24chinadns && rm -f $PREFIX/opt/var/log/* &> /dev/null
			rm -f $CHECK/init.d/S23ss-tunnel
			rm -f $CHECK/ch*
			rm -rf $PREFIX/shadowsocks/dnsmasq.d			
			sleep 1
			if [ -f "/opt/var/log/shadowsocks.log" ]; then
				JSON=`sed -n '1p' /opt/var/log/shadowsocks.log`
				sed -i 's/'"$JSON"'/ARGS="-c \/opt\/etc\/shadowsocks.json"/g' $CHECK/init.d/S22shadowsocks
			fi 
			sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-redir/PROCS=ss-local/" -i  $CHECK/init.d/S22shadowsocks
			sed -i 's/^\([ \t]\+\/opt\/etc\/init.d\/S23ss-tunnel start\)/#\1/;s/^\([ \t]\+\/opt\/etc\/init.d\/S23ss-tunnel restart\)/#\1/' $PREFIX/shadowsocks/shadowsocks
			sed -i 's/^\([ \t]\+\/opt\/etc\/init.d\/S24chinadns start\)/#\1/' $PREFIX/shadowsocks/shadowsocks
			sleep 1
			killall ss-tunnel && killall chinadns
			[ -f "$PREFIX/shadowsocks/flush.lock" ] && rm -f $PREFIX/shadowsocks/flush.lock
			$PREFIX/shadowsocks/shadowsocks flush
			sleep 1
			rm -f /var/log/admflt.lock				
			rm -f /var/log/chinadns.lock
			rm -f /var/log/shadowsocks.lock
			rm -f /var/log/ss-tunnel.lock		
		fi
	else
		echo -e $INFO Is rebuilding the plan script......
		$PREFIX/shadowsocks/shadowsocks flush
		rm -f $PREFIX/opt/var/log/* &> /dev/null
		rm -rf $PREFIX/shadowsocks/dnsmasq.d
		sleep 1
		if [ -f "/opt/var/log/shadowsocks.log" ]; then
			JSON=`sed -n '1p' /opt/var/log/shadowsocks.log`
			sed -i 's/'"$JSON"'/ARGS="-c \/opt\/etc\/shadowsocks.json"/g' $CHECK/init.d/S22shadowsocks
		fi
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-redir/PROCS=ss-local/" -i  $CHECK/init.d/S22shadowsocks
		sed -i 's/^\([ \t]\+\/opt\/etc\/init.d\/S26pdnsd start\)/#\1/' $PREFIX/shadowsocks/shadowsocks
		sleep 1
		killall ss-redir &&killall pdnsd
		sleep 1
		rm -f /var/log/admflt.lock			
		rm -f /var/log/pdnsd.lock
		rm -f /var/log/shadowsocks.lock
	fi

	if [ -f "/var/log/rebuild.lock" ]; then
		for module in ip_set_list_set ip_set_hash_netport ip_set_hash_net ip_set_hash_ipportnet ip_set_hash_ipportip ip_set_hash_ipport ip_set_bitmap_port ip_set_bitmap_ipmac ip_set_bitmap_ip ip_set_hash_ip xt_set
		do
			modprobe -r $module		
		done
	fi

	echo -e $INFO Clear ^scripts ^scheduler ^dnsmasq_custom...	
	nvram set script_wanup=""
	nvram commit
	sleep 1				
	$CHECK/init.d/S10cron stop
	rm -r $CHECK/cron.daily/* &> /dev/null
	rm -r $CHECK/cron.5mins/* &> /dev/null
	rm -r $CHECK/cron.1mins/* &> /dev/null 
	rm -r $CHECK/sch_script/* &> /dev/null

	rm -f $CHECK/dnsmasq.conf
	echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
	echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
	echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
	echo "expand-hosts" >> $dnsmasq
	echo "min-port=4096" >> $dnsmasq
	echo "stop-dns-rebind" >> $dnsmasq
	echo "rebind-localhost-ok" >> $dnsmasq
	echo "interface=`nvram get lan_ifname`" >> $dnsmasq
	echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
	echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
	echo "dhcp-lease-max=255" >> $dnsmasq
	echo "dhcp-authoritative" >> $dnsmasq
	echo >> $dnsmasq	
	service dnsmasq restart
	
	echo -e -n $rebuild_scr
	sleep 1 
	echo -e "$ansi_green PASS. $ansi_std"	
	;;											 

"mail" )
	curl -s --connect-timeout 1 www.google.com &> /dev/null

	if [ "$?" == "0" ]; then
		echo -e "From: $FROM\nContent-Type: text/plain;\nSubject: $TITLE\n\n$CONTENT\nAt: `date -R`" > /tmp/mail.txt
		cat /tmp/mail.txt | sendmail -v -Ssmtp.163.com -f$FROM -au$username -ap$password $TO &> /dev/null
	fi
	;;

"help" )
	shadowsocks
	;;
				
*)
	echo -e "$ansi_green # ------------------------------------------------------------------- $ansi_std"
	echo -e "$ansi_green # Copyright (C) 2016 Jason Lin <wojiaolinmu008@gmail.com> $ansi_std"
	echo -e "$ansi_green # Last edited: 2016.4.15 $ansi_std"
	echo -e "$ansi_green # Version: V5.0-8 (ARM final version) $ansi_std"
	echo -e "$ansi_green # Explain: This script can be used only for shibby Tomato MIPS firmware. $ansi_std"
	echo -e "$ansi_green # Thanks: [@aa65535 @wojiaolinmu008 @tomato_shibby @asus_merlin @bwq518] $ansi_std"
	echo -e "$ansi_green # Description: This is a science on ShadowSocks Internet automatic $ansi_std"
	echo -e "$ansi_green # configuration script in Tomato under$ansi_std. "
	echo -e "$ansi_green # This is free software, licensed under the GNU General Public License v3. $ansi_std"
	echo -e "$ansi_green # See /LICENSE for more information. $ansi_std"
	echo -e "$ansi_green # ------------------------------------------------------------------- $ansi_std"
	echo -e "$ansi_white ===================================================================== $ansi_std"
	echo -e "$ansi_blue WIKI: $ansi_std"
	echo -e "$ansi_white   [set_up] Set ShadowSocks and ChinaDNS $ansi_std"
	echo -e "$ansi_white   [run] Running ShadowSocks and ChinaDNS $ansi_std"
	echo -e "$ansi_white   [ipset] Loading module and ipset rule $ansi_std"
	echo -e "$ansi_white   [rules] Application Firewall Policy $ansi_std"
	echo -e "$ansi_white   [global] Global Proxy $ansi_std"
	echo -e "$ansi_white   [flush] Clear firewall policy $ansi_std"
	echo -e "$ansi_white   [update] Update chnroutes Routing Host $ansi_std"
	echo -e "$ansi_white   [update_gfwlist] Update GFWLIST domain $ansi_std"
	echo -e "$ansi_white   [check] Guardian ss-redir* $ansi_std"
	echo -e "$ansi_white   [check_rules] Guardian iptables rules $ansi_std"
	echo -e "$ansi_white   [ss_switch] Account switching $ansi_std"
	echo -e "$ansi_white   [mult_switch] Multiple_switching $ansi_std"
	echo -e "$ansi_white   [lan_ignore] LAN access control $ansi_std"
	echo -e "$ansi_white   [off_on] Turn off switch $ansi_std"
	echo -e "$ansi_white   [update_scr] Update script $ansi_std"
	echo -e "$ansi_white   [rebuild_scr] Rebuild script $ansi_std"	
	echo -e "$ansi_white   [mail] Send shadowsocks running information $ansi_std"
	echo -e "$ansi_white   [help] Script help $ansi_std"
	echo -e "$ansi_white ===================================================================== $ansi_std"
	exit 
	;;
esac